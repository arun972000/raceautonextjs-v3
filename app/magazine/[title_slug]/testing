"use client";
 
import dynamic from "next/dynamic";
import { useEffect, useRef, useState, useCallback, useMemo } from "react";
import axios from "axios";
import { GrFormNext, GrFormPrevious } from "react-icons/gr";
import Skeleton from "react-loading-skeleton";
import "react-loading-skeleton/dist/skeleton.css";
import "./flip_v2.css";
 
const HTMLFlipBook = dynamic(
  () => import("react-pageflip").then((mod) => mod.default || mod.HTMLFlipBook),
  { ssr: false }
);
 
export default function FlipBookMagazine({ pdfData }) {
  const book = useRef(null);
 
  const s3BaseUrl = process.env.NEXT_PUBLIC_S3_BUCKET_URL || "";
  const fullPdfUrl = useMemo(() => {
    return `${s3BaseUrl.replace(/\/$/, "")}/${pdfData.replace(/^\/+/, "")}`;
  }, [s3BaseUrl, pdfData]);
 
  const [pageImages, setPageImages] = useState([]);
  const [loadingPages, setLoadingPages] = useState(true);
  const [volumeMuted, setVolumeMuted] = useState(true);
  const [pageDim, setPageDim] = useState({ width: 200, height: 280 });
  const [containerWidth, setContainerWidth] = useState(400);
  const [zoomLevel, setZoomLevel] = useState(1);
  const [isMobile, setIsMobile] = useState(false);
  const [autoPlay, setAutoPlay] = useState(false);
 
  // ‚úÖ Update size on resize
  useEffect(() => {
    const updateSize = () => {
      const w = window.innerWidth;
      const mobile = w < 600;
      setIsMobile(mobile);
 
      const margin = 20;
      let maxTotalWidth = Math.min(w - margin, 1200);
 
      if (mobile) {
        maxTotalWidth = w - 20;
      }
 
      let pageW = mobile ? maxTotalWidth / 2.2 : maxTotalWidth / 2;
      if (pageW < 100) pageW = 100;
 
      const pageH = pageW * 1.5;
 
      setContainerWidth(Math.min(pageW * 2, w - margin));
      setPageDim({ width: pageW, height: pageH });
    };
 
    updateSize();
    window.addEventListener("resize", updateSize);
    return () => window.removeEventListener("resize", updateSize);
  }, []);
 
  // ‚úÖ Render PDF pages to images
  useEffect(() => {
    if (!fullPdfUrl) return;
    let cancelled = false;
 
    async function loadAndRender() {
      if (typeof window === "undefined" || !window.pdfjsLib) return;
      setLoadingPages(true);
 
      try {
        const response = await axios.get(fullPdfUrl, { responseType: "blob" });
        const blobUrl = URL.createObjectURL(response.data);
 
        const pdfjsLib = window.pdfjsLib;
        pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;
 
        const loadingTask = pdfjsLib.getDocument(blobUrl);
        const pdf = await loadingTask.promise;
        if (cancelled) return;
 
        const numPages = pdf.numPages;
        setPageImages(Array(numPages).fill(null));
 
        for (let i = 1; i <= numPages; i++) {
          if (cancelled) break;
 
          const page = await pdf.getPage(i);
          const scale = 2;
          const scaledViewport = page.getViewport({ scale });
 
          const canvas = document.createElement("canvas");
          canvas.width = scaledViewport.width;
          canvas.height = scaledViewport.height;
          const context = canvas.getContext("2d");
 
          await page.render({ canvasContext: context, viewport: scaledViewport }).promise;
 
          const dataUrl = canvas.toDataURL();
          setPageImages((prev) => {
            const arr = [...prev];
            arr[i - 1] = dataUrl;
            return arr;
          });
        }
      } catch (err) {
        console.error("Error loading PDF", err);
      } finally {
        if (!cancelled) setLoadingPages(false);
      }
    }
 
    loadAndRender();
    return () => {
      cancelled = true;
    };
  }, [fullPdfUrl, pageDim.width, pageDim.height]);
 
  // ‚úÖ Disable right-click
  useEffect(() => {
    const disableContextMenu = (e) => e.preventDefault();
    window.addEventListener("contextmenu", disableContextMenu);
    return () => window.removeEventListener("contextmenu", disableContextMenu);
  }, []);
 
  // ‚úÖ Home / End key support
  const handleKeyDown = useCallback((e) => {
    if (!book.current) return;
 
    const flip = book.current.pageFlip();
 
    if (e.key === "Home") {
      e.preventDefault();
      flip.turnToPage(0);
      setAutoPlay(false);
    } else if (e.key === "End") {
      e.preventDefault();
      flip.turnToPage(flip.getPageCount() - 1);
      setAutoPlay(false);
    }
  }, []);
 
  useEffect(() => {
    window.addEventListener("keydown", handleKeyDown);
    return () => window.removeEventListener("keydown", handleKeyDown);
  }, [handleKeyDown]);
 
  // ‚úÖ Prev / Next buttons
  const flipNext = useCallback(() => {
    book.current?.pageFlip().flipNext();
    setAutoPlay(false);
  }, []);
 
  const flipPrev = useCallback(() => {
    book.current?.pageFlip().flipPrev();
    setAutoPlay(false);
  }, []);
 
  // ‚úÖ Page-turn audio
  const onFlipAudio = useCallback(() => {
    if (!volumeMuted) {
      new Audio("/turnpage-99756.mp3").play().catch(() => {});
    }
  }, [volumeMuted]);
 
  // ‚úÖ Zoom
  const toggleZoom = () => {
    setZoomLevel((prev) => (prev === 1 ? 1.5 : 1));
  };
 
  // ‚úÖ Autoplay
  useEffect(() => {
    if (!autoPlay || !book.current) return;
 
    const interval = setInterval(() => {
      const flip = book.current.pageFlip();
      if (flip.getCurrentPageIndex() < flip.getPageCount() - 1) {
        flip.flipNext();
      } else {
        setAutoPlay(false);
      }
    }, 3000);
 
    return () => clearInterval(interval);
  }, [autoPlay]);
 
  return (
    <div style={{ backgroundColor: "#000", padding: "10px 0" }}>
      <div
        className="flipbook-wrapper"
        style={{
          width: "100%",
          maxWidth: `${containerWidth * zoomLevel}px`,
          overflowX: "auto",
          margin: "0 auto",
          boxShadow: "0 0 10px rgba(0,0,0,0.5)",
          borderRadius: "10px",
          backgroundColor: "#000",
          position: "relative",
        }}
      >
        <button className="custom-nav-button left" onClick={flipPrev}>
          <GrFormPrevious size={28} />
        </button>
        <button className="custom-nav-button right" onClick={flipNext}>
          <GrFormNext size={28} />
        </button>
 
        <div
          style={{
            transition: "transform 0.3s ease",
            display: "flex",
            justifyContent: "center",
          }}
        >
          {loadingPages ? (
            <Skeleton width={pageDim.width * 2} height={pageDim.height} />
          ) : (
            <HTMLFlipBook
              width={pageDim.width * 2}
              height={pageDim.height}
              size="fixed"
              showCover={true}
              ref={book}
              onFlip={onFlipAudio}
              flippingTime={500}
              disableFlipByClick={false}
              swipeDistance={20}
              clickEventForward={false}
              showPageCorners={false}
              style={{ overflow: "hidden" }}
              mobileScrollSupport={true}
              singlePage={false}
              minWidth={pageDim.width * 2}
            >
              {pageImages.map((src, idx) => (
                <div
                  className="flip-page"
                  key={`page_${idx + 1}`}
                  style={{
                    width: `${pageDim.width}px`,
                    height: `${pageDim.height}px`,
                    display: "flex",
                    justifyContent: "center",
                    alignItems: "center",
                    backgroundColor: "#fff",
                  }}
                >
                  {src ? (
                    <img
                      src={src}
                      alt={`Page ${idx + 1}`}
                      style={{
                        width: "100%",
                        height: "100%",
                        objectFit: "contain",
                      }}
                    />
                  ) : (
                    <Skeleton width={pageDim.width} height={pageDim.height} />
                  )}
                </div>
              ))}
            </HTMLFlipBook>
          )}
        </div>
      </div>
 
      {!loadingPages && (
        <div
          className="position-relative d-flex flex-wrap justify-content-center pt-1"
          style={{
            zIndex: 99,
            color: "white",
            backgroundColor: "rgba(0, 0, 0, 0.5)",
            backdropFilter: "blur(8px)",
            borderRadius: "8px",
            padding: "10px 20px",
            maxWidth: containerWidth,
            margin: isMobile ? "200px auto 0 auto" : "10px auto 0 auto",
          }}
        >
          <div title="Zoom Toggle" className="circle-button" onClick={toggleZoom}>
            {zoomLevel === 1 ? "‚ûï" : "‚ûñ"}
          </div>
 
          <div
            title="Autoplay"
            className="circle-button"
            onClick={() => setAutoPlay((prev) => !prev)}
          >
            {autoPlay ? "‚èπÔ∏è" : "‚ñ∂Ô∏è"}
          </div>
 
          <div
            title="Volume"
            className="circle-button"
            onClick={() => setVolumeMuted(!volumeMuted)}
          >
            {volumeMuted ? "üîá" : "üîä"}
          </div>
 
          <div
            title="Fullscreen"
            className="circle-button"
            onClick={() => {
              const el = document.documentElement;
              if (document.fullscreenElement) {
                document.exitFullscreen();
              } else {
                el.requestFullscreen().catch(() => {});
              }
            }}
          >
            ‚õ∂
          </div>
 
          <a
            title="Download PDF"
            className="circle-button"
            href={fullPdfUrl}
            download
            style={{ textDecoration: "none", color: "white" }}
          >
            ‚¨áÔ∏è
          </a>
        </div>
      )}
    </div>
  );
}
 
 